{"mappings":"qfAGAA,EAAAC,QAAWC,sBACXF,EAAAC,QAAWE,IAAMH,EAAAI,IAAO,EAAG,KAC3B,MAAMC,EAAO,IAAIL,EAAAM,OAAU,CACvBC,MAAO,IACPC,OAAQ,IACRC,YAAaT,EAAAU,YAAeC,YAG1BC,EAAM,IAAIZ,EAAAa,MAAS,CACrBC,IAAKd,EAAAI,IAAOC,EAAKU,eAAe,KAChCR,MAAO,GACPC,OAAQ,GACRQ,SAAUC,KAAKC,GAAK,EACpBC,MAAOnB,EAAAoB,MAASC,IAChBC,cAAetB,EAAAuB,cAAiBC,SAG9BC,EAAiB,CAACzB,EAAAI,KAAO,GAAK,IAAKJ,EAAAI,IAAO,GAAG,IAAMJ,EAAAI,IAAO,GAAI,KAC9DsB,EAAW,IAAI1B,EAAAa,MAAS,CAC1BC,IAAKd,EAAAI,IAAOC,EAAKU,cAAe,KAChCC,SAAUC,KAAKC,GAAK,EACpBS,SAAU,IAAI3B,EAAA4B,gBAAmB,CAACC,OAAQJ,IAC1CH,cAAetB,EAAAuB,cAAiBC,SAE9BM,EAAkB,IAAI9B,EAAA+B,QAAW,CAACF,OAAQJ,EAAgBN,MAAOnB,EAAAoB,MAASY,QAChFN,EAASO,SAASC,IAAIJ,GAEtB,MAAMK,EAAS,IAAInC,EAAAa,MAAS,CACxBC,IAAKd,EAAAI,IAAOC,EAAKU,cAAgB,IAAI,KACrCqB,OAAQ,GACRjB,MAAOnB,EAAAoB,MAASiB,OAChBf,cAAetB,EAAAuB,cAAiBC,SAG9Bc,EAAS,IAAItC,EAAAa,MAAS,CACxBC,IAAKd,EAAAI,IAAOC,EAAKU,cAAeV,EAAKkC,YACrChC,MAAOF,EAAKmC,UACZhC,OAAQ,IACRW,MAAOnB,EAAAoB,MAASqB,SAChBnB,cAAetB,EAAAuB,cAAiBmB,QAGpCrC,EAAKsC,QAAQC,MAAI,KACbvC,EAAKwC,aAAaC,IAAIlC,GACtBP,EAAKwC,aAAaC,IAAIX,GACtB9B,EAAKwC,aAAaC,IAAIpB,GACtBrB,EAAKwC,aAAaC,IAAIR,GACtBjC,EAAKwC,aAAaE,OAAOjC,IAAMd,EAAAI,IAAOC,EAAKU,cAAeV,EAAK2C","sources":["src/collision/main.ts"],"sourcesContent":["import * as ex from 'excalibur';\n\n// start-snippet{collision}\nex.Physics.useRealisticPhysics();\nex.Physics.acc = ex.vec(0, 300);\nconst game = new ex.Engine({\n    width: 600,\n    height: 400,\n    displayMode: ex.DisplayMode.FitScreen\n});\n\nconst box = new ex.Actor({\n    pos: ex.vec(game.halfDrawWidth, -100),\n    width: 50,\n    height: 50,\n    rotation: Math.PI / 3,\n    color: ex.Color.Red,\n    collisionType: ex.CollisionType.Active\n});\n\nconst trianglePoints = [ex.vec(-20, 20), ex.vec(0, -20), ex.vec(20, 20)];\nconst triangle = new ex.Actor({\n    pos: ex.vec(game.halfDrawWidth, 100),\n    rotation: Math.PI / 3,\n    collider: new ex.PolygonCollider({points: trianglePoints}),\n    collisionType: ex.CollisionType.Active\n});\nconst triangleGraphic = new ex.Polygon({points: trianglePoints, color: ex.Color.Green});\ntriangle.graphics.use(triangleGraphic);\n\nconst circle = new ex.Actor({\n    pos: ex.vec(game.halfDrawWidth + 20, -200),\n    radius: 30,\n    color: ex.Color.Yellow,\n    collisionType: ex.CollisionType.Active\n});\n\nconst ground = new ex.Actor({\n    pos: ex.vec(game.halfDrawWidth, game.drawHeight),\n    width: game.drawWidth,\n    height: 100,\n    color: ex.Color.DarkGray,\n    collisionType: ex.CollisionType.Fixed\n});\n// start-snippet{collision}\ngame.start().then(() => {\n    game.currentScene.add(box);\n    game.currentScene.add(circle);\n    game.currentScene.add(triangle);\n    game.currentScene.add(ground);\n    game.currentScene.camera.pos = ex.vec(game.halfDrawWidth, game.halfDrawHeight);\n});\n"],"names":["$jLJwM","Physics","useRealisticPhysics","acc","vec","$420af5ab98db25ff$var$game","Engine","width","height","displayMode","DisplayMode","FitScreen","$420af5ab98db25ff$var$box","Actor","pos","halfDrawWidth","rotation","Math","PI","color","Color","Red","collisionType","CollisionType","Active","$420af5ab98db25ff$var$trianglePoints","$420af5ab98db25ff$var$triangle","collider","PolygonCollider","points","$420af5ab98db25ff$var$triangleGraphic","Polygon","Green","graphics","use","$420af5ab98db25ff$var$circle","radius","Yellow","$420af5ab98db25ff$var$ground","drawHeight","drawWidth","DarkGray","Fixed","start","then","currentScene","add","camera","halfDrawHeight"],"version":3,"file":"index.2fccb3ba.js.map"}